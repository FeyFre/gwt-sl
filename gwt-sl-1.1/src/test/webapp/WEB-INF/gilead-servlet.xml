<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">


	<!-- 
		Example on how to use the HB4GWTRPCServiceExporter which combines hibernate4gwt's (now gilead)
		HibernateBeanManager with a GWTRPCServiceExporter. This servlet loads an in-memory
		HSQLDB.
	-->
	<bean
		class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<map>
				<entry key="/domain" value-ref="GileadDomainService" />
			</map>
		</property>
	</bean>
	
	<!-- 
	Gilead setup boilerplate, for details see the Gilead
	documentation
	-->

	<bean id="SessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="useTransactionAwareDataSource" value="true"/>
		<property name="mappingResources">
			<list>
				<value>orm/Product.hbm.xml</value>
				<value>orm/Discount.hbm.xml</value>
				<value>orm/ProductOrder.hbm.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.HSQLDialect
				</prop>
				<prop key="hibernate.hbm2ddl.auto">create</prop>
				<prop key="ShowSqlEnabled">true</prop>
			</props>
		</property>
	</bean>
	
	<!--
	Setup transaction handling 
	 -->
	 <aop:config>
		<aop:pointcut id="hb4GwtInvocation"
                    expression="execution(* org.gwtwidgets.server.spring.gilead.GileadRPCServiceExporter.invokeMethodOnService(..))"/>
		<aop:advisor pointcut-ref="hb4GwtInvocation" advice-ref="defaultTxAdvice"/>
	 </aop:config>
	
	<tx:advice id="defaultTxAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
	
	<!--
	Wrap around the real Service and export is as an RPC-aware controller 
	 -->
	<bean id="GileadDomainService" class="org.gwtwidgets.server.spring.gilead.GileadRPCServiceExporter">
		<property name="sessionFactory" ref="SessionFactory" />
		<property name="service" ref="HibernateDomainService" />
		<!-- Use with dynamic proxy mode 
		<property name="usingProxyClassLoader" value="true"/>
		 -->
	</bean>

	<!--
	Uppon initialisation, this service adds a few entries to the mapped Hibernate datas used later on
	by the client application.
	 -->
	<bean id="HibernateDomainService" class="org.gwtwidgets.server.spring.test.serverimpl.HibernateDomainServiceImpl">
		<property name="sessionFactory" ref="SessionFactory"/>		
	</bean>

</beans>
